@page "/"
@using BlazorLogger
@inject ILogger logger

<h1>Blazor Logger Demo Site</h1>

<p>Open your browser's console and click the buttons below</p>

<h2>Clear</h2>

<button class="btn btn-primary" type="button" onclick="@onclickClear">Clear the Log</button>

<h2>Count</h2>

<button class="btn btn-primary" type="button" onclick="@onclickCount">Count Demo</button>

<h2>Error</h2>

<h3>Error: Single String and Object</h3>

<button class="btn btn-danger" type="button" onclick="@onclickError1">Error String</button>

<button class="btn btn-danger" type="button" onclick="@onclickError2">Error Object</button>

<h3>Error: Array of Objects</h3>

<button class="btn btn-danger" type="button" onclick="@onclickError3">Error Array of Objects</button>

<h3>Error: String Substitutions</h3>

<button class="btn btn-danger" type="button" onclick="@onclickError4">
    Error with String Substitutions
</button>

<h3>Error: Exception</h3>

<button class="btn btn-danger" type="button" onclick="@onclickError5">Error Exception</button>

<h2>Group</h2>

<button class="btn btn-primary" type="button" onclick="@onclickGroupExpanded">Group Expanded</button>

<button class="btn btn-primary" type="button" onclick="@onclickGroupCollapsed">Group Collapsed</button>

<button class="btn btn-primary" type="button" onclick="@onclickGroupCollapsedStyles">Group Collapsed with Styles</button>

<h2>Info</h2>

<h3>Info: Single String and Object</h3>

<button class="btn btn-info" type="button" onclick="@onclickInfo1">Info String</button>

<button class="btn btn-info" type="button" onclick="@onclickInfo2">Info Object</button>

<h3>Info: Array of Objects</h3>

<button class="btn btn-info" type="button" onclick="@onclickInfo3">Info Array of Objects</button>

<h3>Info: String Substitutions</h3>

<button class="btn btn-info" type="button" onclick="@onclickInfo4">Info with String Substitutions</button>

<h2>Log</h2>

<h3>Log: Single String and Object</h3>

<button class="btn btn-primary" type="button" onclick="@onclickLog1">Log String</button>

<button class="btn btn-primary" type="button" onclick="@onclickLog2">Log Object</button>

<h3>Log: Array of Objects</h3>

<button class="btn btn-primary" type="button" onclick="@onclickLog3">Log Array of Objects</button>

<h3>Log: String Substitutions</h3>

<button class="btn btn-primary" type="button" onclick="@onclickLog4">Log with String Substitutions</button>

<h2>Table</h2>

<button class="btn btn-primary" type="button" onclick="@onclickTable1">Array of Strings</button>

<button class="btn btn-primary" type="button" onclick="@onclickTable2">Object</button>

<button class="btn btn-primary" type="button" onclick="@onclickTable3">Array of Arrays</button>

<button class="btn btn-primary" type="button" onclick="@onclickTable4">Array of Objects</button>

<button class="btn btn-primary" type="button" onclick="@onclickTable5">Object of Objects</button>

<button class="btn btn-primary" type="button" onclick="@onclickTable6">Restricting the columns displayed</button>

<h2>Time</h2>

<button class="btn btn-primary" type="button" onclick="@onclickTimer1">Start Timer</button>

<button class="btn btn-primary" type="button" onclick="@onclickTimer2">End Timer</button>

<h2>Warn</h2>

<h3>Warn: Single String and Object</h3>

<button class="btn btn-warning" type="button" onclick="@onclickWarn1">Warn String</button>

<button class="btn btn-warning" type="button" onclick="@onclickWarn2">Warn Object</button>

<h3>Warn: Array of Objects</h3>

<button class="btn btn-warning" type="button" onclick="@onclickWarn3">Warn Array of Objects</button>

<h3>Warn: String Substitutions</h3>

<button class="btn btn-warning" type="button" onclick="@onclickWarn4">Warn with String Substitutions</button>


@functions {
    void onclickClear()
    {
        logger.Clear();
    }

    void onclickCount()
    {
        //Logger.Count(); - currently does not work: https://github.com/aspnet/Blazor/issues/739
        logger.Count(null);
        logger.Count(null);
        logger.Count("bob");
        logger.Count("alice");
        logger.Count("bob");
        /* Output:

        default: 1
        default: 2
        bob: 1
        alice: 1
        bob: 2 */
    }

    void onclickError1()
    {
        logger.Error("Hello World");
    }

    void onclickError2()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        logger.Error(person);
    }

    void onclickError3()
    {
        var list = new List<Person> { new Person { FirstName = "Jane", LastName = "Doe" }, new Person { FirstName = "John", LastName = "Smith" } };
        logger.Error(list);
    }

    void onclickError4()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        var message = "Hello, %O, you have been called %i times";
        for (int i = 0; i < 5; i++)
        {
            logger.Error(message, person, i + 1);
        }
    }

    void onclickError5()
    {
        logger.Error("An exception occurred: %O", new Exception("Oh no! An Exception occurred!"));
    }

    void onclickGroupExpanded()
    {
        //Currently to use a group with no name, must pass null. See: https://github.com/aspnet/Blazor/issues/739
        logger.Log("This is the outer level");
        logger.Group("Outer Group");
        logger.Log("Level 2");
        logger.Group("Inner Group");
        logger.Log("Level 3");
        logger.Log("More of level 3"); //Change to Warn
        logger.GroupEnd();
        logger.Log("Back to level 2");
        logger.GroupEnd();
        logger.Log("Back to the outer level");
    }

    void onclickGroupCollapsed()
    {
        //Currently to use a group with no name, must pass null. See: https://github.com/aspnet/Blazor/issues/739
        logger.Log("This is the outer level");
        logger.GroupCollapsed("Outer Group");
        logger.Log("Level 2");
        logger.GroupCollapsed("Inner Group");
        logger.Log("Level 3");
        logger.Warn("More of level 3");
        logger.GroupEnd();
        logger.Log("Back to level 2");
        logger.GroupEnd();
        logger.Log("Back to the outer level");
    }

    void onclickGroupCollapsedStyles()
    {
        logger.GroupCollapsed("%cStyled Group", "color: red; font - style: bold;");
        logger.Log("Log message");
        logger.Log("Second line");
        logger.GroupEnd();
    }

    void onclickInfo1()
    {
        logger.Info("Hello World");
    }

    void onclickInfo2()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        logger.Info(person);
    }

    void onclickInfo3()
    {
        var list = new List<Person> { new Person { FirstName = "Jane", LastName = "Doe" }, new Person { FirstName = "John", LastName = "Smith" } };
        logger.Info(list);
    }

    void onclickInfo4()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        var message = "Hello, %O, you have been called %i times";
        for (int i = 0; i < 5; i++)
        {
            logger.Info(message, person, i + 1);
        }
    }

    void onclickLog1()
    {
        logger.Log("Hello World");
    }

    void onclickLog2()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        logger.Log(person);
    }

    void onclickLog3()
    {
        var list = new List<Person> { new Person { FirstName = "Jane", LastName = "Doe" }, new Person { FirstName = "John", LastName = "Smith" } };
        logger.Log(list);
    }

    void onclickLog4()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        var message = "Hello, %O, you have been called %i times";
        for (int i = 0; i < 5; i++)
        {
            logger.Log(message, person, i + 1);
        }
    }

    void onclickTable1()
    {
        var arr = new string[] { "apples", "oranges", "bananas" };
        logger.Table(arr);
    }

    void onclickTable2()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        logger.Table(person);
    }

    void onclickTable3()
    {
        var arr = new string[][] { new string[] { "John", "Smith" }, new string[] { "Jane", "Doe" }, new string[] { "Emily", "Jones" } };
        logger.Table(arr);
    }

    void onclickTable4()
    {
        var list = new List<Person> {
    new Person { FirstName = "John", LastName ="Smith" },
    new Person { FirstName = "Jane", LastName = "Doe" },
    new Person { FirstName = "Emily", LastName = "Jones" }
};
        logger.Table(list);
    }

    void onclickTable5()
    {
        var family = new Family
        {
            Mother = new Person { FirstName = "Jane", LastName = "Smith" },
            Father = new Person { FirstName = "John", LastName = "Smith" },
            Daughter = new Person { FirstName = "Emily", LastName = "Smith" }
        };
        logger.Table(family);
    }

    void onclickTable6()
    {
        var list = new List<Person> {
    new Person { FirstName = "John", LastName ="Smith" },
    new Person { FirstName = "Jane", LastName = "Doe" },
    new Person { FirstName = "Emily", LastName = "Jones" }
};
        logger.Table(list, new string[] { "FirstName" });
    }

    void onclickTimer1()
    {
        logger.Time("my-timer");
    }

    void onclickTimer2()
    {
        logger.TimeEnd("my-timer");
    }

    void onclickWarn1()
    {
        logger.Warn("Hello World");
    }

    void onclickWarn2()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        logger.Warn(person);
    }

    void onclickWarn3()
    {
        var list = new List<Person> { new Person { FirstName = "Jane", LastName = "Doe" }, new Person { FirstName = "John", LastName = "Smith" } };
        logger.Warn(list);
    }

    void onclickWarn4()
    {
        var person = new Person { FirstName = "John", LastName = "Smith" };
        var message = "Hello, %O, you have been called %i times";
        for (int i = 0; i < 5; i++)
        {
            logger.Warn(message, person, i + 1);
        }
    }

    class Person
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    class Family
    {
        public Person Mother { get; set; }
        public Person Father { get; set; }
        public Person Daughter { get; set; }
    }
}
